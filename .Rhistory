x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = 20,
validation_split = 0.4,
verbose = 2,
view_metrics = FALSE
)
metric <- do.call(data.table::data.table, history$metrics)
metric[, epoch := 1:.N]
models[[model_num]] <- model
metric_list[[model_num]] <- metric
}
metrics <- do.call(rbind, metric_list)
model_means <- metrics[, .(
mean_val_loss = mean(val_loss),
sd_val_loss = sd(val_loss)
), by = epoch]
mins <- model_means[which.min(mean_val_loss)]
mins[, point := "min"]
ggplot()+
geom_ribbon(aes(
x=epoch, ymin=mean_val_loss-sd_val_loss, ymax=mean_val_loss+sd_val_loss),
alpha=0.5,
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss, color=point),
data=mins)
ggplot()+
geom_line(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss, color=point),
data=mins)
View(metrics)
View(metrics)
for( model_num in 1:num_models){
model <- keras_model_sequential() %>%
layer_dense( units = model_units[model_num], activation = "sigmoid", input_shape = c(ncol(x))) %>%
layer_dense(1, activation = "sigmoid")
model %>%
compile(
loss= "binary_crossentropy",
optimizer = "sgd",
metrics = "accuracy"
)
history <- model %>%
fit(
x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = 20,
validation_split = 0.4,
verbose = 2,
view_metrics = FALSE
)
metric <- do.call(data.table::data.table, history$metrics)
metric[, epoch := 1:.N]
metric[, model_num := model_num]
models[[model_num]] <- model
metric_list[[model_num]] <- metric
}
metrics <- do.call(rbind, metric_list)
View(metrics)
View(metrics)
ggplot()+
geom_line(aes(
x=epoch, y=mean_val_loss),
data=model_means, set = model_num)+
geom_point(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss, color=point),
data=mins)
ggplot()+
geom_line(aes(
x=epoch, y=mean_val_loss, set = model_num),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss, color=point),
data=mins)
ggplot()+
geom_line(aes(
x=epoch, y=mean_val_loss, group = model_num),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss, color=point),
data=mins)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=mean_val_loss),
data=model_means)+
geom_point(aes(
x=epoch, y=mean_val_loss, color=point),
data=mins)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)
mins <- metrics[which.min(val_loss)]
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, line_type = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)
mins <- metrics[ model_num == 1, which.min(val_loss)]
mins <- metrics[, .(
val_loss = which.min(val_loss),
), by = model_num]
mins <- metrics[, .(
val_loss = which.min(val_loss)
), by = model_num]
mins <- metrics[, .(
val_loss = which.min(val_loss),
epoch = epoch
), by = model_num]
View(mins)
View(mins)
mins <- metrics[, .(
val_loss = which.min(val_loss),
epoch = metrics$epoch[which.min(val_loss)]
), by = model_num]
mins <- metrics[, .(
val_loss = min(val_loss),
epoch = which.min(val_loss)
), by = model_num]
View(mins)
View(mins)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=metrics)
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
best_epochs <- mins$epoch
for( model_num in 1:length(models)) {
history <- models[[model_num]] %>%
fit(
x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = best_epochs[model_num],
validation_split = 0,
verbose = 2,
view_metrics = FALSE
)
}
best_runs <- list()
for( model_num in 1:length(models)) {
history <- models[[model_num]] %>%
fit(
x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = best_epochs[model_num],
validation_split = 0,
verbose = 2,
view_metrics = FALSE
)
metric <- do.call(data.table::data.table, history$metrics)
metric[, epoch := 1:.N]
metric[, model_num := model_num]
best_runs[[model_num]] <- metric
}
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
best_runs <- do.call(rbind, best_runs)
View(best_runs)
models[[1]] %>%
evaluate( x_scale[!is_train,], y[!is_train])
models[[1]] %>%
evaluate( x_scale[!is_train,], as.matrix(y[!is_train]))
for(model_num in 1:length(models))
{
models[[model_num]] %>%
evaluate( x_scale[!is_train,], as.matrix(y[!is_train]))
}
table(y[is_train])
y_tab <= table(y[is_train])
y_tab <- table(y[is_train])
y_baseline <- as.integer(names(which.max(y_tab)))
mean(y[!is_train] == baseline)
mean(y[!is_train] == y_baseline)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read in data
spam_datatable <- data.table::fread("spam.data")
# split data into usable elements
x <- spam_datatable[, -58]
x_scale <- scale(x)
y <- spam_datatable[, 58]
is_train <- vector(mode = "logical", length = nrow(x))
is_train <- sample(c(TRUE, FALSE), nrow(x), replace = TRUE, prob = c(0.8, 0.2))
# training models
model_units <- c(10,100,1000)
num_models <- length(model_units)
models <- list()
metric_list <- list()
for( model_num in 1:num_models){
model <- keras_model_sequential() %>%
layer_dense( units = model_units[model_num], activation = "sigmoid", input_shape = c(ncol(x))) %>%
layer_dense(1, activation = "sigmoid")
model %>%
compile(
loss= "binary_crossentropy",
optimizer = "sgd",
metrics = "accuracy"
)
history <- model %>%
fit(
x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = 20,
validation_split = 0.4,
verbose = 2,
view_metrics = FALSE
)
metric <- do.call(data.table::data.table, history$metrics)
metric[, epoch := 1:.N]
metric[, model_num := model_num]
models[[model_num]] <- model
metric_list[[model_num]] <- metric
}
# read in data
spam_datatable <- data.table::fread("spam.data")
# split data into usable elements
x <- spam_datatable[, -58]
x_scale <- scale(x)
y <- spam_datatable[, 58]
is_train <- vector(mode = "logical", length = nrow(x))
is_train <- sample(c(TRUE, FALSE), nrow(x), replace = TRUE, prob = c(0.8, 0.2))
# training models
model_units <- c(10,100,1000)
num_models <- length(model_units)
models <- list()
metric_list <- list()
for( model_num in 1:num_models){
model <- keras_model_sequential() %>%
layer_dense( units = model_units[model_num], activation = "sigmoid", input_shape = c(ncol(x))) %>%
layer_dense(1, activation = "sigmoid")
model %>%
compile(
loss= "binary_crossentropy",
optimizer = "sgd",
metrics = "accuracy"
)
history <- model %>%
fit(
x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = 100,
validation_split = 0.4,
verbose = 2,
view_metrics = FALSE
)
metric <- do.call(data.table::data.table, history$metrics)
metric[, epoch := 1:.N]
metric[, model_num := model_num]
models[[model_num]] <- model
metric_list[[model_num]] <- metric
}
metrics <- do.call(rbind, metric_list)
# calc min val loss and epoch by model num
mins <- metrics[, .(
val_loss = min(val_loss),
epoch = which.min(val_loss)
), by = model_num]
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = factor(model_num)),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# re train with best epoch
best_epochs <- mins$epoch
best_runs <- list()
for( model_num in 1:length(models)) {
history <- models[[model_num]] %>%
fit(
x = x_scale[is_train,],
y = as.matrix(y[is_train]),
epochs = best_epochs[model_num],
validation_split = 0,
verbose = 2,
view_metrics = FALSE
)
metric <- do.call(data.table::data.table, history$metrics)
metric[, epoch := 1:.N]
metric[, model_num := model_num]
best_runs[[model_num]] <- metric
}
best_runs <- do.call(rbind, best_runs)
# evaluate each model with test set
for(model_num in 1:length(models))
# evaluate each model with test set
for(model_num in 1:length(models)){
models[[model_num]] %>%
evaluate( x_scale[!is_train,], as.matrix(y[!is_train]))
}
# accuracy of baseline prediction
y_tab <- table(y[is_train])
y_baseline <- as.integer(names(which.max(y_tab)))
mean(y[!is_train] == y_baseline)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num, linetype = "dashed"),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num, linetype = "dotted"),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num),
data=metrics)+
scale_linetype_manual(values=c("twodash", "dotted"))
# plot val loss for each model
ggplot()+
scale_linetype_manual(values=c("twodash", "dotted"))+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num),
data=metrics)+
scale_linetype_manual(values=c("twodash", "dotted"))+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# plot val loss for each model
my_linetype = c("solid", "dotted")
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num, linetype = my_linetype),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num, linetype = my_linetype),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num, linetype = "dashed"),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num, linetype = "dashed"),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, min = 5),
data=mins)
# plot val loss for each model
ggplot()+
geom_line(aes(
x=epoch, y=val_loss, group = model_num, color = model_num),
data=metrics)+
geom_line(aes(
x=epoch, y=loss, group = model_num, color = model_num, linetype = "dashed"),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num),
data=metrics)+
geom_point(aes(
x=epoch, y=val_loss, color = model_num, size = 5),
data=mins)
